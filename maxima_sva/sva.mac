/*
crm: spatial cross-product operator (motion).
crm(v) calculates the 6x6 matrix such that the expression crm(v).m is the
cross product of the spatial motion vectors v and m.
*/
crm(v) := matrix(
 [0,-v[3],v[2],0,0,0],
 [v[3],0,-v[1],0,0,0],
 [-v[2],v[1],0,0,0,0],
 [0,-v[6],v[5],0,-v[3],v[2]],
 [v[6],0,-v[4],v[3],0,-v[1]],
 [-v[5],v[4],0,-v[2],v[1],0]
)$

/*
crf: spatial cross-product operator (force).
crf(v) calculates the 6x6 matrix such that the expression crf(v)*f is the cross
product of the spatial motion vector v with the spatial force vector f.
*/
crf(v) := matrix(
 [0,-v[3],v[2],0,-v[6],v[5]],
 [v[3],0,-v[1],v[6],0,-v[4]],
 [-v[2],v[1],0,-v[5],v[4],0],
 [0,0,0,0,-v[3],v[2]],
 [0,0,0,v[3],0,-v[1]],
 [0,0,0,-v[2],v[1],0]
)$

/*
Xrotx: spatial coordinate transform (X-axis rotation).
Xrotx(theta) calculates the coordinate transform matrix from A to B coordinates
for spatial motion vectors, where coordinate frame B is rotated by an angle
theta (radians) relative to frame A about their common X axis.
*/
Xrotx(theta):=matrix(
 [1,0,0,0,0,0],
 [0,cos(theta),sin(theta),0,0,0],
 [0,-sin(theta),cos(theta),0,0,0],
 [0,0,0,1,0,0],
 [0,0,0,0,cos(theta),sin(theta)],
 [0,0,0,0,-sin(theta),cos(theta)]
)$

/*
Xroty: spatial coordinate transform (Y-axis rotation).
Xroty(theta) calculates the coordinate transform matrix from A to B coordinates
for spatial motion vectors, where coordinate frame B is rotated by an angle
theta (radians) relative to frame A about their common Y axis.
*/
Xroty(theta):=matrix(
 [cos(theta),0,-sin(theta),0,0,0],
 [0,1,0,0,0,0],
 [sin(theta),0,cos(theta),0,0,0],
 [0,0,0,cos(theta),0,-sin(theta)],
 [0,0,0,0,1,0],
 [0,0,0,sin(theta),0,cos(theta)]
)$

/*
Xrotz: spatial coordinate transform (Z-axis rotation).
Xrotz(theta) calculates the coordinate transform matrix from A to B coordinates
for spatial motion vectors, where coordinate frame B is rotated by an angle
theta (radians) relative to frame A about their common Z axis.
*/
Xrotz(theta):=matrix(
 [cos(theta),sin(theta),0,0,0,0],
 [-sin(theta),cos(theta),0,0,0,0],
 [0,0,1,0,0,0],
 [0,0,0,cos(theta),sin(theta),0],
 [0,0,0,-sin(theta),cos(theta),0],
 [0,0,0,0,0,1]
)$

/*
Xtrans: spatial coordinate transform (translation of origin).
Xtrans(r) calculates the coordinate transform matrix from A to B coordinates
for spatial motion vectors, in which frame B is translated by an amount r
(3D vector) relative to frame A.
*/
Xtrans(r):=matrix(
 [1,0,0,0,0,0],
 [0,1,0,0,0,0],
 [0,0,1,0,0,0],
 [0,r[3],-r[2],1,0,0],
 [-r[3],0,r[1],0,1,0],
 [r[2],-r[1],0,0,0,1]
)$

/*
mcI: spatial rigid-body inertia from mass, CoM and rotational inertia.
mcI(m,c,I) calculates the spatial inertia matrix of a rigid body from its mass,
centre of mass (3D vector) and rotational inertia (3x3 matrix) about its
centre of mass.
*/
mcI(m,c,I):=
block(
C : matrix(
 [0,-c[3],c[2]],
 [c[3],0,-c[1]],
 [-c[2],c[1],0]),
ImCCt : I+m*C.transpose(C),
mC : m*C,
matrix([ImCCt[1,1],ImCCt[1,2],ImCCt[1,3],mC[1,1],mC[1,2],mC[1,3]],
       [ImCCt[2,1],ImCCt[2,2],ImCCt[2,3],mC[2,1],mC[2,2],mC[2,3]],
	   [ImCCt[3,1],ImCCt[3,2],ImCCt[3,3],mC[3,1],mC[3,2],mC[3,3]],
	   [mC[1,1],mC[2,1],mC[3,1],m,0,0],
	   [mC[1,2],mC[2,2],mC[3,2],0,m,0],
	   [mC[1,3],mC[2,3],mC[3,3],0,0,m])
)$

/*
jcalcXj: calculate the joint transformation matrix.
jcalcXj(pitch,q) calculates the joint transformation matrix for a revolute
(pitch==0), prismatic (pitch==inf) or helical (pitch==any other value) joint.
For revolute and helical joints, q is the joint angle. For prismatic joints,
q is the linear displacement.
*/
jcalcXj(pitch,q):=
block(
if pitch = 0 then Xrotz(q)                  /* revolute joint */
elseif pitch = inf then Xtrans([0,0,q])     /* prismatic joint */
else Xrotz(q).Xtrans([0,0,q*pitch])         /* helical joint */
)$

/*
jcalcS: calculate the joint motion subspace matrix.
jcalcS(pitch,q) calculates the joint motion subspace matrix for a revolute
(pitch==0), prismatic (pitch==inf) or helical (pitch==any other value) joint.
For revolute and helical joints, q is the joint angle. For prismatic joints,
q is the linear displacement.
*/
jcalcS(pitch,q):=
block(
if pitch = 0 then [0,0,1,0,0,0]             /* revolute joint */
elseif pitch = inf then [0,0,0,0,0,1]       /* prismatic joint */
else [0,0,1,0,0,pitch]                      /* helical joint */
)$

/*
HandC: Calculate coefficients of equation of motion.
HandC(Nb,q,Xtree,qd,parent,v,avp,a_grav,I) calculates the coefficients of the
joint-space equation of motion, tau=H(q)qdd+C(d,qd,f_ext), where q, qd and qdd
are the joint position, velocity and acceleration vectors, H is the joint-space
inertia matrix, C is the vector of gravity, external-force and velocity-product
terms, and tau is the joint force vector.
Algorithm: recursive Newton-Euler for C, and Composite-Rigid-Body for H. f_ext
is a list specifying external forces acting on the bodies: f_ext[ii] is a
spatial force vector giving the force acting on body ii, expressed in body ii
coordinates. Empty entries in f_ext are interpreted as zero forces. a_grav is
the spatial expressing the acceleration due to gravity.
*/
HandC (Nb,q,Xtree,qd,parent,v,avp,f_ext,a_grav,I) := block
(
  /* calculate the joint transformation matrices, body spatial velocities */
  for ii: 1 thru Nb do
  (
    Xj : Xrotz(q[ii]),
    Xup[ii] : Xj.Xtree[ii],
    S[ii] : ematrix(6,1,1,3,1),
    vJ : S[ii]*qd[ii],
    if parent[ii] = 0 then
	(
	  v[ii] : vJ,
	  avp[ii] : Xup[ii].a_grav
    )
    else
	(
      v[ii] : Xup[ii].v[parent[ii]] + vJ,
      avp[ii] : Xup[ii].avp[parent[ii]] + crm(v[ii]).vJ
    ),
    fvp[ii] : I[ii].avp[ii] + crf(v[ii]).I[ii].v[ii],
    if f_ext[ii] # [] then
        fvp[ii] : fvp[ii] - f_ext[ii]
  ),

  /* assemble C matrix */
  C : makelist(0,ii,1,Nb),
  for ii: Nb step -1 thru 1 do
  (
    C[ii] : transpose(S[ii]).fvp[ii],
    if parent[ii] # 0 then
        fvp[parent[ii]] : fvp[parent[ii]] + transpose(Xup[ii]).fvp[ii]
  ),
  /* trigonometric simplification */
  C: trigsimp(C),

  /* composite inertia calculation */
  /* initialize the spatial body inertia matrices */
  Ic : makelist(0,ii,1,Nb),
  for ii: 1 thru Nb do (Ic[ii] : I[ii]),

  for ii: Nb step -1 thru 1 do
  (
    if parent[ii] # 0 then
      Ic[parent[ii]] : Ic[parent[ii]] + transpose(Xup[ii]).Ic[ii].Xup[ii]
  ),
  /* trigonometric simplification */
  Ic: trigsimp(Ic),

  /* initialize joint space inertia matrix */
  H : zeromatrix(Nb,Nb),

  /* composite rigid body algorithm */
  for ii: 1 thru Nb do
  (
    F : Ic[ii].S[ii],
    H[ii,ii] : transpose(S[ii]).F,
    jj : ii,
    while parent[jj] > 0 do
    (
      F : transpose(Xup[jj]).F,
      jj : parent[jj],
      H[ii,jj] : transpose(S[jj]).F,
      H[jj,ii] : H[ii,jj]
    )
  )
)$
